// Contributors: Hardik R. Dava/Jacob F. Fast
// 2020/2021
//
// Congruence_Evaluation.cpp
//
// Read two previously registered point clouds and calculate congruence between them
// using nearest neighbor Euclidean distance between reconstructed (source) and Ground Truth (target) point cloud.

#include "mainwindow.h"
#include <QApplication>
#include <QtCore>

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>

//PCL headers
#include<Eigen/Core>
#include <pcl/common/common_headers.h>
#include <boost/thread/thread.hpp>
#include <pcl/point_cloud.h>
#include <pcl/io/ply_io.h>
#include <pcl/point_types.h>

#include <opencv2/core/eigen.hpp>

#include <pcl/kdtree/kdtree_flann.h>

#include <pcl/geometry/boost.h>
#include <pcl/geometry/eigen.h>
#include<pcl/kdtree/kdtree_flann.h>
#include<pcl/search/kdtree.h>

#include <pcl/point_cloud.h>
#include <pcl/octree/octree_search.h>
#include <pcl/kdtree/kdtree_flann.h>


// colormaps for point cloud distance visualization

/*

 // autumn
unsigned char autumn_r[256] = {};
unsigned char autumn_g[256] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 };
unsigned char autumn_b[256] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

// jet
unsigned char red[256] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138, 142, 146, 150, 154, 158, 162, 166, 170, 174, 178, 182, 186, 190, 194, 198, 202, 206, 210, 214, 218, 222, 226, 230, 234, 238, 242, 246, 250, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252, 248, 244, 240, 236, 232, 228, 224, 220, 216, 212, 208, 204, 200, 196, 192, 188, 184, 180, 176, 172, 168, 164, 160, 156, 152, 148, 144, 140, 136, 132, 128 };
unsigned char green[256] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252, 248, 244, 240, 236, 232, 228, 224, 220, 216, 212, 208, 204, 200, 196, 192, 188, 184, 180, 176, 172, 168, 164, 160, 156, 152, 148, 144, 140, 136, 132, 128, 124, 120, 116, 112, 108, 104, 100, 96, 92, 88, 84, 80, 76, 72, 68, 64, 60, 56, 52, 48, 44, 40, 36, 32, 28, 24, 20, 16, 12, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
unsigned char blue[256] = { 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 250, 246, 242, 238, 234, 230, 226, 222, 218, 214, 210, 206, 202, 198, 194, 190, 186, 182, 178, 174, 170, 166, 162, 158, 154, 150, 146, 142, 138, 134, 130, 126, 122, 118, 114, 110, 106, 102, 98, 94, 90, 86, 82, 78, 74, 70, 66, 62, 58, 54, 50, 46, 42, 38, 34, 30, 26, 22, 18, 14, 10, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

// ocean
unsigned char red[256] = {};
unsigned char green[256] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 6, 8, 9, 10, 12, 13, 15, 17, 18, 20, 21, 22, 24, 26, 27, 28, 30, 32, 33, 34, 36, 38, 39, 40, 42, 44, 45, 46, 48, 50, 51, 52, 54, 56, 57, 58, 60, 62, 63, 64, 66, 68, 69, 70, 72, 74, 75, 76, 78, 80, 81, 82, 84, 86, 87, 88, 90, 92, 93, 94, 96, 98, 99, 100, 102, 104, 105, 106, 108, 110, 111, 112, 114, 116, 117, 118, 120, 122, 123, 124, 126, 128, 129, 130, 132, 134, 135, 136, 138, 140, 141, 142, 144, 146, 147, 148, 150, 152, 153, 154, 156, 158, 159, 161, 162, 164, 165, 166, 168, 170, 171, 172, 174, 176, 177, 178, 180, 182, 183, 184, 186, 188, 189, 190, 192, 194, 195, 196, 198, 200, 201, 202, 204, 206, 207, 208, 210, 212, 213, 214, 216, 218, 219, 220, 222, 224, 225, 226, 228, 230, 231, 232, 234, 236, 237, 238, 240, 242, 243, 244, 246, 248, 249, 251, 252, 254, 255 };
unsigned char blue[256] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 };


// rainbow
unsigned char red[256] = { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 252, 248, 244, 240, 235, 230, 225, 220, 215, 210, 205, 200, 195, 190, 185, 180, 175, 170, 165, 160, 155, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 11, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 10, 13, 17, 20, 23, 27, 30, 33, 37, 40, 43, 47, 50, 53, 57, 60, 63, 67, 70, 73, 77, 80, 83, 87, 90, 93, 97, 100, 103, 107, 110, 113, 117, 120, 123, 127, 130, 133, 137, 140, 143, 147, 150, 153, 157, 160, 163, 167, 170 };
unsigned char green[256] = { 0, 2, 5, 8, 10, 12, 15, 18, 20, 22, 25, 27, 30, 32, 35, 38, 40, 42, 45, 48, 50, 52, 55, 57, 60, 62, 65, 68, 70, 72, 75, 78, 80, 82, 85, 88, 90, 92, 95, 98, 100, 102, 105, 108, 110, 112, 115, 117, 120, 122, 125, 128, 130, 132, 135, 138, 140, 142, 145, 148, 150, 152, 155, 158, 160, 162, 165, 168, 170, 172, 175, 178, 180, 182, 185, 188, 190, 192, 195, 198, 200, 202, 205, 208, 210, 212, 215, 218, 220, 223, 225, 228, 230, 232, 235, 238, 240, 243, 245, 248, 250, 252, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 253, 252, 250, 245, 240, 235, 230, 225, 220, 215, 210, 205, 200, 195, 190, 185, 180, 175, 170, 165, 160, 155, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 7, 5, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
unsigned char blue[256] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 248, 250, 252, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 };
*/


// turbo colormap
unsigned char red[256] = { 48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,63,64,65,65,66,66,67,68,68,68,69,69,69,70,70,70,70,70,71,71,71,71,71,71,70,70,70,70,70,69,69,68,67,66,65,64,62,61,59,58,56,55,53,51,49,47,46,44,42,40,39,37,35,34,32,31,30,28,27,26,26,25,24,24,24,24,24,24,25,25,26,28,29,31,32,34,37,39,42,44,47,50,53,56,60,63,67,70,74,78,82,85,89,93,97,101,105,109,113,117,121,125,128,132,136,139,143,146,150,153,156,159,161,164,167,169,172,175,177,180,183,185,188,190,193,195,198,200,203,205,208,210,212,215,217,219,221,223,225,227,229,231,233,235,236,238,239,241,242,244,245,246,247,248,249,250,251,251,252,252,253,253,254,254,254,254,254,254,254,254,254,254,253,253,252,252,251,251,250,249,249,248,247,246,245,244,243,242,241,240,239,237,236,235,234,232,231,229,228,226,225,223,221,220,218,216,214,212,210,208,206,204,202,200,197,195,193,190,188,185,183,180,178,175,172,169,167,164,161,158,155,152,149,146,142,139,136,133,129,126,122 };
unsigned char green[256] = { 18,21,24,27,30,33,36,39,42,45,47,50,53,56,59,62,64,67,70,73,75,78,81,84,86,89,92,94,97,100,102,105,107,110,113,115,118,120,123,125,128,130,133,135,138,140,143,145,148,150,153,155,158,160,163,165,168,171,173,175,178,180,183,185,188,190,192,195,197,199,201,203,205,208,210,212,213,215,217,219,221,222,224,226,227,228,230,231,233,234,235,236,238,239,240,241,242,243,244,245,246,247,248,248,249,250,250,251,252,252,253,253,254,254,254,254,255,255,255,255,255,255,255,254,254,254,253,253,252,252,251,251,250,249,248,247,246,245,244,243,241,240,239,237,236,234,233,231,229,228,226,224,223,221,219,217,215,213,211,209,207,205,203,201,199,197,195,193,190,188,186,184,182,179,177,174,172,169,167,164,161,158,155,153,150,147,144,141,138,135,132,129,126,123,120,117,114,111,108,105,102,99,96,93,91,88,85,83,80,78,75,73,71,69,67,65,63,61,59,57,55,53,51,49,47,45,43,42,40,38,37,35,33,32,30,29,27,26,24,23,22,20,19,18,16,15,14,13,11,10,9,8,7,6,5,4 };
unsigned char blue[256] = { 59,67,74,81,88,95,102,109,115,121,128,134,139,145,151,156,162,167,172,177,181,186,191,195,199,203,207,211,214,218,221,224,227,230,233,235,238,240,242,244,246,248,250,251,252,253,254,254,255,255,255,254,254,253,252,251,250,248,247,245,244,242,240,238,235,233,231,228,226,223,221,218,216,213,210,208,205,202,200,197,194,192,189,187,185,182,180,178,175,172,170,167,164,161,158,155,152,148,145,142,138,135,132,128,125,122,118,115,111,108,105,102,98,95,92,89,86,83,81,78,75,73,71,68,66,64,63,61,60,58,57,56,55,54,54,53,53,52,52,52,52,52,52,52,52,52,53,53,53,54,54,55,55,55,56,56,57,57,57,58,58,58,58,58,58,58,58,58,57,57,57,56,55,54,54,53,52,51,50,49,48,47,45,44,43,42,41,39,38,37,35,34,33,31,30,29,28,26,25,24,23,21,20,19,18,17,16,15,14,13,12,12,11,10,10,9,8,8,7,7,6,6,5,5,5,4,4,4,3,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3 };

using namespace std;
using namespace pcl;

// flag for point cloud density evaluation (i.e., intra-cloud distance calculation)
bool bPerformDensityCalculation = false;

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    // estimate congruence between aligned point clouds, starting with source point cloud from stereo laryngoscope

    // load point clouds as PointXYZ objects

    // load ground truth point cloud (obtained by laser scanning here)

    string GTcloudpath;

    if(!bPerformDensityCalculation)
    {
        GTcloudpath = "GT_registered.ply";
    }
    else
    {
        GTcloudpath = "SGBM_registered.ply";
    }

    pcl::PointCloud<pcl::PointXYZ>::Ptr GT (new pcl::PointCloud<pcl::PointXYZ>());
    pcl::io::loadPLYFile(GTcloudpath, *GT);

    // load source point cloud (here: from stereo laryngoscope)

     string stereocloudpath = "SGBM_registered.ply";

     pcl::PointCloud<pcl::PointXYZ>::Ptr stereo (new pcl::PointCloud<pcl::PointXYZ>());
     pcl::io::loadPLYFile(stereocloudpath, *stereo);

     // declaration to save all points from stereo laryngoscope point cloud for later color-coding application
     std::vector<pcl::PointXYZ> sourcepoints;

     // declaration of vectors for error storage
     // here two error vectors are used (one for color-coding and the second for finding minimum/maximum/median values)
     std::vector<float> error;
     std::vector<float> errorcopy;

    // perform K nearest neighbor search, starting from stereo laryngoscope point cloud
    // see https://pointclouds.org/documentation/tutorials/kdtree_search.html

    // initialize KdTree as searchMethod
    pcl::search::KdTree<PointXYZ> tree;

    // define point cloud to which nearest neighbors are to be identified
    tree.setInputCloud(GT);

    // number of nearest neighbors to search for
    // set k=2 if nearest neighbor is searched in identical clouds for point cloud density calculation (nearest neighbor has distance = 0, second nearest neighbor then is nearest point)

    int k;

    if(!bPerformDensityCalculation)
    {
        k=1;
    }
    else
    {
        k=2;
    }

    // "indices" vector contains the point index in the point cloud which corresponds to the current nearest neighbor point
    // "sqr_distances" vector contains the squared Euclidean distance between the current search point and the nearest neighbor point
    std::vector<int> indices(k);
    std::vector<float> sqr_distances(k);

    // go through all points from stereo laryngoscope point cloud
    for (std::size_t i=0; i<stereo->points.size(); i++)
    {
        // perform nearest neighbor search for all points of stereo laryngoscope point cloud
        tree.nearestKSearch(stereo->points[i], k, indices, sqr_distances);

        if(!bPerformDensityCalculation)
        {
            if (sqr_distances[0] > 0)
            {
                float distance = sqr_distances[0];

                distance = std::sqrt(distance);

                // if error is lower than 500 mm (extreme outliers): save error (Euclidean distance), stereo point cloud point and targetpoint to visualize correspondences
                if(distance < 500.0)
                {
                    error.push_back(distance);
                    errorcopy.push_back(distance);
                    sourcepoints.push_back(stereo->points[i]);
                }
            }
        }
        else
        {
            if (sqr_distances[1] > 0)
            {
                float distance = sqr_distances[1];

                distance = std::sqrt(distance);

                // if distance is lower than 500 mm (extreme outliers): save error (Euclidean distance), stereo point cloud point and targetpoint to visualize correspondences
                if(distance < 500.0)
                {
                    error.push_back(distance);
                    errorcopy.push_back(distance);
                    sourcepoints.push_back(stereo->points[i]);
                }
            }
        }
    }

    // sort copy of errror vector
    sort(errorcopy.begin(), errorcopy.end());

    // first element gives the minimum distance after vector sorting
    float minimum = errorcopy[0];
    std::cout<<"Minimum point to point distance: " << minimum << std::endl << std::endl;

    // last element gives the maximumum distance after vector sorting
    float maximum = errorcopy[errorcopy.size()-1];
    std::cout << "Maximum point to point distance: " << maximum << std::endl << std::endl;

    // find value at 50 percent of vector elements (median value)
    std::cout << "Median point to point distance: " << errorcopy[int(error.size()/2)] << std::endl << std::endl;

    // save error values as .csv file for boxplot creation

    float val = 0.0;
    string errorfile = "distances.csv";

    std::ofstream errorvec;
    errorvec.open (errorfile);

    for(std::size_t i = 0; i < error.size(); i++)
    {
        val = error[i];
        errorvec << val << std::endl;
    }

    errorvec.close();

    // calculate sum of all stereo point cloud error vector elements (for arithmetic mean)
    float sum_of_elements(0);
    for (std::size_t i(error.size()); i>0; --i)
    {
        sum_of_elements += error[i-1];
    }

    std::cout << "Arithmetic mean of Euclidean point to point distances: " << sum_of_elements/error.size() << std::endl << std::endl;

    // calculate sum of squared stereo laryngoscope point cloud distance vector elements (RMS)
    float square = 0.0;
    for (std::size_t i(error.size()); i > 0; --i)
    {
        square += error[i-1]*error[i-1];
    }

    std::cout << "RMS of point to point distances: " << std::sqrt(square/error.size()) << std::endl << std::endl;

    // compute color-coded point cloud

    pcl::PointCloud<pcl::PointXYZRGB>::Ptr pointcloudcolor(new pcl::PointCloud<pcl::PointXYZRGB>());
    pcl::PointXYZRGB pointcolor;

    // go through all points of stereo laryngoscope point cloud
    for(std::size_t i=0; i<sourcepoints.size(); i++)
    {
        // copy stereo laryngoscope point cloud coordinates to new point cloud
        pointcolor.x = sourcepoints[i].x;
        pointcolor.y = sourcepoints[i].y;
        pointcolor.z = sourcepoints[i].z;

        // normalize the error value to [0;255] interval as look-up-table is for 256 elements
        // newval = ((oldval - Min)*(256/(Max-Min)))
        float e = ((error[i]-minimum)/(maximum-minimum))*256.0;

        // apply color after normalization of error values
        pointcolor.b =blue[(int)e];
        pointcolor.g =green[(int)e];
        pointcolor.r =red[(int)e];

        // add color-mapped point to pointcloudcolor point cloud
        pointcloudcolor->points.push_back(pointcolor);
    }

    // set dimensions of pointcloudcolor point cloud
    pointcloudcolor->width = 1;
    pointcloudcolor->height = pointcloudcolor->points.size();

    // save color-coded point cloud
    string colorcodedpath = "ColorCodedCloud.ply";

    // string colorcodedfile = directory + std::to_string(n)+"/ColorCodedCloud.ply";
    pcl::io::savePLYFile(colorcodedpath,*pointcloudcolor);

    return 0;
 }
